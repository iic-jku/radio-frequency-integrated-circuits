::: {.content-hidden}
Copyright (C) 2025 Harald Pretl and co-authors (harald.pretl@jku.at)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:::

```{python}
#| label: fig-1db-compression-point
#| echo: false
#| fig-cap: "1dB compression point test showing input vs output power relationship and the definition of P1dB."

import numpy as np
import matplotlib.pyplot as plt

# Define input power range (in dBm)
Pin_dBm = np.linspace(-30, 10, 1000)
Pin_linear = 10**(Pin_dBm/10)  # Convert to linear scale (mW)

# Circuit parameters
alpha1 = 100  # Linear coefficient
alpha3 = -0.2 * alpha1  # Third-order coefficient (negative for compression)

# Calculate output using nonlinear model (simplified)
# For single tone: Pout = G * Pin * (1 + 3/4 * alpha3/alpha1 * Pin)
# Approximation for demonstration
compression_factor = 1 + 0.75 * (alpha3/alpha1) * Pin_linear
Pout_linear = alpha1 * Pin_linear * compression_factor
Pout_dBm = 10 * np.log10(np.abs(Pout_linear))

# Ideal linear response
Pout_ideal_dBm = Pin_dBm + 10*np.log10(alpha1)

# Find 1dB compression point
gain_actual = Pout_dBm - Pin_dBm
gain_compression = 10*np.log10(alpha1) - gain_actual
idx_1dB = np.argmin(np.abs(gain_compression - 1.0))
P1dB_in = Pin_dBm[idx_1dB]
P1dB_out = Pout_dBm[idx_1dB]

# Create the plot
fig, ax = plt.subplots(1, 1)

# Plot ideal and actual responses
ax.plot(Pin_dBm, Pout_ideal_dBm, 'b--', linewidth=2, label='Ideal Linear Response', alpha=0.7)
ax.plot(Pin_dBm, Pout_dBm, 'r-', linewidth=2.5, label='Actual Nonlinear Response')

# Mark 1dB compression point
ax.plot(P1dB_in, P1dB_out, 'ko', markersize=8, markerfacecolor='black', 
        markeredgewidth=2, markeredgecolor='black', label=f'P1dB = {P1dB_in:.1f} dBm')

# Add vertical and horizontal lines for P1dB
ax.axvline(P1dB_in, color='gray', linestyle=':', alpha=0.7)
ax.axhline(P1dB_out, color='gray', linestyle=':', alpha=0.7)

# Formatting
ax.set_xlabel('Input Power (dBm)')
ax.set_ylabel('Output Power (dBm)')
#ax.set_title('1dB Compression Point Test', fontsize=14, fontweight='bold')
ax.grid(True, alpha=0.3)
ax.legend(loc='lower right', fontsize=11)

# Set axis limits for better visualization
ax.set_xlim(-25, 5)
ax.set_ylim(-10, 25)

plt.show()
```

::: {.content-hidden}
Copyright (C) 2025 Harald Pretl and co-authors (harald.pretl@jku.at)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:::

```{python}
#| label: fig-lna-inductive-degeneration-detailed
#| echo: false
#| fig-cap: "An (almost complete) common-source MOSFET stage with degeneration impedance and cascode."
import schemdraw as sd
import schemdraw.elements as elm
import schemdraw.dsp as dsp

sd.svgconfig.svg2 = False

with sd.Drawing(canvas='svg') as d:
    d.config(unit=2, fontsize=14)

    #elm.Ground()
    src1 = elm.SourceSin().up().label(r'$v_\mathrm{in}$')
    elm.Resistor().right().label(r'$R_\mathrm{s}$')
    elm.Line().right().length(d.unit/4)
    elm.Dot(open=True)
    elm.Inductor().right().label(r'$L_\mathrm{match}$')
    elm.Capacitor().right().label('dc block')
    elm.Line().right().length(d.unit/4).dot()
    d.push()
    elm.Line().right().length(d.unit/2)
    M1 = elm.AnalogNFet(offset_gate=False).label(r'$M_1$', loc='right').reverse().anchor('gate').drop('source')
    Ldeg = elm.Inductor().down().label(r'$L_\mathrm{deg}$')
    elm.Ground()

    d.pop()
    elm.Resistor().down().label(r'$R_\mathrm{bias}$')
    elm.Line().down().length(d.unit/4).dot(open=True).label(r'$V_\mathrm{bias1}$', loc='left')

    M2 = elm.AnalogNFet(offset_gate=False).right().at(M1.drain).label(r'$M_2$', loc='right').anchor('source').drop('drain').reverse()
    elm.Line().left().length(d.unit/4).at(M2.gate).dot(open=True).label(r'$V_\mathrm{bias2}$', loc='left')

    # load
    elm.Line().up().at(M2.drain).length(d.unit/4).dot()
    d.push()
    elm.Resistor().up().label(r'$R_\mathrm{D}$')
    d.pop()
    d.push()
    elm.Line().left().length(d.unit*3/4)
    L1 = elm.Inductor().up().label(r'$L_\mathrm{D}$')
    d.pop()
    elm.Line().right().length(d.unit*3/4).dot()
    d.push()
    elm.Line().right().length(d.unit/2).label(r'$v_\mathrm{out}$', loc='right').dot(open=True)
    d.pop()
    C1 = elm.Capacitor().up().label(r'$C_\mathrm{D}$')
    elm.Line().at((L1.end[0]-d.unit/4, L1.end[1])).to((C1.end[0]+d.unit/4, C1.end[1])).label(r'$V_\mathrm{DD}$').linewidth(3)

    # complete ground of input
    elm.Line().at(src1.start).down().toy(Ldeg.end)
    elm.Ground()
```
